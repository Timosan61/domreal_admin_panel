/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ü–µ–Ω–∫–∏ –∑–≤–æ–Ω–∫–∞ (–Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω)
 */

// –ü–æ–ª—É—á–∞–µ–º callid –∏–∑ URL
const urlParams = new URLSearchParams(window.location.search);
const callid = urlParams.get('callid');

// WaveSurfer instance
let wavesurfer = null;

// Checklist questions
const checklistQuestions = [
    {
        id: 'location',
        text: '–í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–∞–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä',
        key: 'location'
    },
    {
        id: 'planning',
        text: '–£—Ç–æ—á–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
        key: 'goal'
    },
    {
        id: 'stroika',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞',
        key: 'is_local',
        icon: 'üëÅÔ∏è'
    },
    {
        id: 'budget',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∏–º–µ–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç',
        key: 'payment'
    },
    {
        id: 'zemlya',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫',
        key: 'budget'
    },
    {
        id: 'vozvrat',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –ø–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –ª—Å—Ç–∫ –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞',
        key: 'goal',
        icon: 'üëÅÔ∏è'
    },
    {
        id: 'tech',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Å —á–µ–º –µ—â–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ª—Å—Ç–∫',
        key: 'goal',
        icon: 'üëÅÔ∏è'
    },
    {
        id: 'criteria',
        text: '–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        key: 'goal'
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    if (!callid) {
        alert('–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–≤–æ–Ω–∫–∞');
        window.location.href = 'index_new.php';
        return;
    }

    initializeAudioPlayer();
    loadCallDetails();
    setupEventListeners();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–∞ —Å waveform
 */
function initializeAudioPlayer() {
    wavesurfer = WaveSurfer.create({
        container: '#waveform',
        waveColor: '#D1D5DB',
        progressColor: '#007AFF',
        cursorColor: '#007AFF',
        barWidth: 2,
        barGap: 1,
        barRadius: 2,
        height: 64,
        normalize: true,
        backend: 'WebAudio'
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    wavesurfer.on('ready', function() {
        const duration = wavesurfer.getDuration();
        document.getElementById('total-time').textContent = formatTime(duration);
    });

    wavesurfer.on('audioprocess', function() {
        const currentTime = wavesurfer.getCurrentTime();
        document.getElementById('current-time').textContent = formatTime(currentTime);
    });

    wavesurfer.on('finish', function() {
        updatePlayPauseButton(false);
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // Play/Pause
    document.getElementById('play-pause-btn').addEventListener('click', function() {
        if (wavesurfer) {
            wavesurfer.playPause();
            updatePlayPauseButton(wavesurfer.isPlaying());
        }
    });

    // –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    document.getElementById('playback-speed').addEventListener('change', function() {
        if (wavesurfer) {
            wavesurfer.setPlaybackRate(parseFloat(this.value));
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    document.getElementById('save-evaluation').addEventListener('click', saveEvaluation);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ
 */
async function loadCallDetails() {
    try {
        const response = await fetch(`api/call_details.php?callid=${encodeURIComponent(callid)}`);
        const result = await response.json();

        if (result.success) {
            renderCallDetails(result.data);
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–≤–æ–Ω–∫–∞
 */
function renderCallDetails(call) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('call-datetime').textContent = formatDateTime(call.started_at_utc);
    document.getElementById('client-phone').textContent = call.client_phone || '–ù–µ —É–∫–∞–∑–∞–Ω';

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    document.getElementById('field-direction').textContent = call.direction === 'INBOUND' ? '–í—Ö–æ–¥—è—â–∏–π' : '–ò—Å—Ö–æ–¥—è—â–∏–π';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (call.audio_path || call.call_url) {
        const audioUrl = call.audio_path || call.call_url;
        wavesurfer.load(audioUrl);
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞—É–¥–∏–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        document.querySelector('.waveform-container').innerHTML = '<p class="empty-state">–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞
    renderChecklist(call.checklist || []);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    renderTranscript(call.diarization || []);
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞
 */
function renderChecklist(savedChecklist) {
    const container = document.getElementById('checklist-container');

    let html = '';
    let totalQuestions = checklistQuestions.length;
    let answeredYes = 0;

    checklistQuestions.forEach((question, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const savedItem = savedChecklist.find(item => item.id === question.id);
        const savedValue = savedItem ? (savedItem.checked ? 'yes' : 'no') : '';

        if (savedValue === 'yes') answeredYes++;

        html += `
            <div class="checklist-item">
                <div class="checklist-question">
                    ${question.icon ? `<span class="question-icon">${question.icon}</span>` : ''}
                    ${question.text}
                </div>
                <div class="checklist-options">
                    <label class="radio-option">
                        <input type="radio" name="question_${index}" value="no" ${savedValue === 'no' ? 'checked' : ''}>
                        <span>–ù–ï–¢</span>
                    </label>
                    <label class="radio-option">
                        <input type="radio" name="question_${index}" value="yes" ${savedValue === 'yes' ? 'checked' : ''}>
                        <span>–î–ê</span>
                    </label>
                    <label class="radio-option">
                        <input type="radio" name="question_${index}" value="na" ${savedValue === 'na' ? 'checked' : ''}>
                        <span>–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è</span>
                    </label>
                </div>
            </div>
        `;
    });

    container.innerHTML = html;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    updateChecklistScore(answeredYes, totalQuestions);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    container.querySelectorAll('input[type="radio"]').forEach(input => {
        input.addEventListener('change', updateChecklistScoreFromInputs);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞
 */
function updateChecklistScore(answered, total) {
    document.getElementById('checklist-score').textContent = `${answered}/${total}`;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
 */
function updateChecklistScoreFromInputs() {
    let answeredYes = 0;
    const total = checklistQuestions.length;

    for (let i = 0; i < total; i++) {
        const selected = document.querySelector(`input[name="question_${i}"]:checked`);
        if (selected && selected.value === 'yes') {
            answeredYes++;
        }
    }

    updateChecklistScore(answeredYes, total);
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
 */
function renderTranscript(diarization) {
    const container = document.getElementById('transcript-container');

    if (!diarization || diarization.length === 0) {
        container.innerHTML = '<p class="empty-state">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
        return;
    }

    let html = '<div class="transcript-list">';

    diarization.forEach(segment => {
        const speaker = segment.speaker === 'agent' ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : '–ö–ª–∏–µ–Ω—Ç';
        html += `
            <div class="transcript-item">
                <div class="transcript-speaker">${speaker}:</div>
                <div class="transcript-text">${escapeHtml(segment.text)}</div>
            </div>
        `;
    });

    html += '</div>';
    container.innerHTML = html;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
 */
async function saveEvaluation() {
    // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã —á–µ–∫–ª–∏—Å—Ç–∞
    const answers = {};

    checklistQuestions.forEach((question, index) => {
        const selected = document.querySelector(`input[name="question_${index}"]:checked`);
        if (selected) {
            answers[question.id] = selected.value;
        }
    });

    try {
        const response = await fetch('api/save_evaluation.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                callid: callid,
                checklist: answers
            })
        });

        const result = await response.json();

        if (result.success) {
            alert('–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
 */
function toggleSection(header) {
    const section = header.closest('.panel-section');
    section.classList.toggle('collapsed');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Play/Pause
 */
function updatePlayPauseButton(isPlaying) {
    const btn = document.getElementById('play-pause-btn');

    if (isPlaying) {
        btn.innerHTML = `
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <rect x="6" y="4" width="4" height="16"></rect>
                <rect x="14" y="4" width="4" height="16"></rect>
            </svg>
        `;
    } else {
        btn.innerHTML = `
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
        `;
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã -> –º–º:—Å—Å)
 */
function formatTime(seconds) {
    if (!seconds || isNaN(seconds)) return '00:00';

    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);

    return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatDateTime(dateStr) {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    if (!text) return '';
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}
