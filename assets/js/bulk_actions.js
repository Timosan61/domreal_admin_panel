/**
 * Bulk Actions –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–æ–≤
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º –∑–≤–æ–Ω–∫–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–≥–æ–≤
 */

class BulkActions {
    constructor() {
        this.selectedCallIds = new Set();
        this.currentTagType = null;

        this.bulkActionsBar = document.getElementById('bulk-actions-bar');
        this.selectedCountEl = document.getElementById('selected-count');
        this.selectAllCheckbox = document.getElementById('select-all-calls');

        this.tagModal = document.getElementById('tag-modal');
        this.tagModalTitle = document.getElementById('tag-modal-title');
        this.tagModalCount = document.getElementById('tag-modal-count');
        this.tagNoteTextarea = document.getElementById('tag-note');

        this.init();
    }

    init() {
        console.log('üé¨ BulkActions –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        console.log('–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
            bulkActionsBar: !!this.bulkActionsBar,
            selectAllCheckbox: !!this.selectAllCheckbox,
            tagModal: !!this.tagModal
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
        this.initCheckboxHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–µ–≥–æ–≤
        this.initTagButtons();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.initModalHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è bulk actions
        document.getElementById('bulk-actions-close')?.addEventListener('click', () => {
            this.clearSelection();
        });

        console.log('‚úÖ BulkActions —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ–∫–±–æ–∫—Å–æ–≤
     */
    initCheckboxHandlers() {
        // Select All checkbox
        if (this.selectAllCheckbox) {
            this.selectAllCheckbox.addEventListener('change', (e) => {
                this.handleSelectAll(e.target.checked);
            });
        }

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫
        const tbody = document.getElementById('calls-tbody');
        if (tbody) {
            tbody.addEventListener('change', (e) => {
                if (e.target.type === 'checkbox' && e.target.classList.contains('call-checkbox')) {
                    this.handleRowCheckbox(e.target);
                }
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Select All
     */
    handleSelectAll(checked) {
        const checkboxes = document.querySelectorAll('.call-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            const row = checkbox.closest('tr');
            const callId = checkbox.dataset.callid;

            if (checked) {
                this.selectedCallIds.add(callId);
                row?.classList.add('selected');
            } else {
                this.selectedCallIds.delete(callId);
                row?.classList.remove('selected');
            }
        });

        this.updateUI();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–±–æ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏
     */
    handleRowCheckbox(checkbox) {
        const callId = checkbox.dataset.callid;
        const row = checkbox.closest('tr');

        console.log('‚úÖ –ß–µ–∫–±–æ–∫—Å –∫–ª–∏–∫:', callId, checkbox.checked);

        if (checkbox.checked) {
            this.selectedCallIds.add(callId);
            row?.classList.add('selected');
        } else {
            this.selectedCallIds.delete(callId);
            row?.classList.remove('selected');

            // –°–Ω—è—Ç—å –≥–∞–ª–æ—á–∫—É —Å Select All
            if (this.selectAllCheckbox) {
                this.selectAllCheckbox.checked = false;
            }
        }

        console.log('üìä –í—ã–±—Ä–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤:', this.selectedCallIds.size);
        this.updateUI();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (–ø–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏, —Å—á–µ—Ç—á–∏–∫)
     */
    updateUI() {
        const count = this.selectedCallIds.size;
        console.log('üîÑ updateUI –≤—ã–∑–≤–∞–Ω, –≤—ã–±—Ä–∞–Ω–æ:', count);

        if (count > 0) {
            console.log('üëâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å bulk actions');
            this.bulkActionsBar.style.display = 'block';
            this.selectedCountEl.textContent = count;
        } else {
            console.log('üëâ –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å bulk actions');
            this.bulkActionsBar.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Select All
        if (this.selectAllCheckbox) {
            const totalCheckboxes = document.querySelectorAll('.call-checkbox').length;
            this.selectAllCheckbox.checked = count > 0 && count === totalCheckboxes;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Ç–µ–≥–æ–≤
     */
    initTagButtons() {
        // –ö–Ω–æ–ø–∫–∞ "–•–æ—Ä–æ—à–æ"
        document.getElementById('bulk-tag-good')?.addEventListener('click', () => {
            this.openTagModal('good', '‚úÖ –•–æ—Ä–æ—à–æ');
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü–ª–æ—Ö–æ"
        document.getElementById('bulk-tag-bad')?.addEventListener('click', () => {
            this.openTagModal('bad', '‚ùå –ü–ª–æ—Ö–æ');
        });

        // –ö–Ω–æ–ø–∫–∞ "–í–æ–ø—Ä–æ—Å"
        document.getElementById('bulk-tag-question')?.addEventListener('click', () => {
            this.openTagModal('question', '‚ùì –í–æ–ø—Ä–æ—Å');
        });

        // –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å —Ç–µ–≥–∏"
        document.getElementById('bulk-remove-tags')?.addEventListener('click', () => {
            this.removeTags();
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
     */
    openTagModal(tagType, title) {
        this.currentTagType = tagType;
        this.tagModalTitle.textContent = `–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–≥: ${title}`;
        this.tagModalCount.textContent = this.selectedCallIds.size;
        this.tagNoteTextarea.value = '';
        this.tagModal.style.display = 'flex';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    initModalHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModal = () => {
            this.tagModal.style.display = 'none';
            this.currentTagType = null;
        };

        document.getElementById('tag-modal-close')?.addEventListener('click', closeModal);
        document.getElementById('tag-modal-cancel')?.addEventListener('click', closeModal);
        document.getElementById('tag-modal-overlay')?.addEventListener('click', closeModal);

        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–≥
        document.getElementById('tag-modal-submit')?.addEventListener('click', () => {
            this.applyTag();
        });

        // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.tagModal.style.display === 'flex') {
                closeModal();
            }
        });
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–≥ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º
     */
    async applyTag() {
        if (!this.currentTagType || this.selectedCallIds.size === 0) {
            return;
        }

        const note = this.tagNoteTextarea.value.trim();
        const callids = Array.from(this.selectedCallIds);

        const submitBtn = document.getElementById('tag-modal-submit');
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...';

        try {
            const response = await fetch('/api/tags.php', {
                method: 'POST',
                credentials: 'same-origin',  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    callids: callids,
                    tag_type: this.currentTagType,
                    note: note || null
                })
            });

            const result = await response.json();

            if (result.success) {
                // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.tagModal.style.display = 'none';

                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification(
                    `‚úÖ –¢–µ–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ ${result.count} –∑–≤–æ–Ω–∫—É(–∞–º)`,
                    'success'
                );

                // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
                this.updateTagsInTable(callids, this.currentTagType);

                // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                this.clearSelection();
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞:', error);
            this.showNotification(
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                'error'
            );
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    }

    /**
     * –°–Ω—è—Ç—å —Ç–µ–≥–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
     */
    async removeTags() {
        if (this.selectedCallIds.size === 0) {
            return;
        }

        if (!confirm(`–°–Ω—è—Ç—å —Ç–µ–≥–∏ —Å ${this.selectedCallIds.size} –∑–≤–æ–Ω–∫–∞(–æ–≤)?`)) {
            return;
        }

        const callids = Array.from(this.selectedCallIds);

        try {
            const response = await fetch('/api/tags.php', {
                method: 'DELETE',
                credentials: 'same-origin',  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    callids: callids
                })
            });

            const result = await response.json();

            if (result.success) {
                this.showNotification(
                    `‚úÖ –¢–µ–≥–∏ —Å–Ω—è—Ç—ã —Å ${result.deleted} –∑–≤–æ–Ω–∫–∞(–æ–≤)`,
                    'success'
                );

                // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                this.updateTagsInTable(callids, null);

                // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                this.clearSelection();
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ç–µ–≥–æ–≤');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ç–µ–≥–æ–≤:', error);
            this.showNotification(
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                'error'
            );
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    updateTagsInTable(callids, tagType) {
        const tagEmojis = {
            'good': '‚úÖ',
            'bad': '‚ùå',
            'question': '‚ùì'
        };

        callids.forEach(callid => {
            const checkbox = document.querySelector(`.call-checkbox[data-callid="${callid}"]`);
            if (checkbox) {
                const row = checkbox.closest('tr');
                const tagCell = row.querySelector('.tag-cell');

                if (tagCell) {
                    if (tagType) {
                        tagCell.textContent = tagEmojis[tagType];
                        tagCell.classList.remove('no-tag');
                        tagCell.title = `–¢–µ–≥: ${tagType}`;
                    } else {
                        tagCell.textContent = '‚Äî';
                        tagCell.classList.add('no-tag');
                        tagCell.title = '–ë–µ–∑ —Ç–µ–≥–∞';
                    }
                }
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
     */
    clearSelection() {
        this.selectedCallIds.clear();

        // –°–Ω—è—Ç—å –≥–∞–ª–æ—á–∫–∏
        document.querySelectorAll('.call-checkbox').forEach(checkbox => {
            checkbox.checked = false;
        });

        if (this.selectAllCheckbox) {
            this.selectAllCheckbox.checked = false;
        }

        // –£–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å selected —É —Å—Ç—Ä–æ–∫
        document.querySelectorAll('.calls-table tbody tr.selected').forEach(row => {
            row.classList.remove('selected');
        });

        this.updateUI();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            background: ${type === 'success' ? '#34C759' : '#FF3B30'};
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10001;
            animation: slideInRight 0.3s ease-out;
            font-size: 14px;
            font-weight: 500;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö)
     */
    addCheckboxesToRows() {
        const rows = document.querySelectorAll('.calls-table tbody tr[data-callid]');
        rows.forEach(row => {
            const callId = row.dataset.callid;

            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ–∫–±–æ–∫—Å
            if (!row.querySelector('.call-checkbox')) {
                const firstCell = row.cells[0];
                if (firstCell) {
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.classList.add('call-checkbox');
                    checkbox.dataset.callid = callId;

                    firstCell.innerHTML = '';
                    firstCell.appendChild(checkbox);
                }
            }
        });
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(400px);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(400px);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let bulkActionsInstance = null;

document.addEventListener('DOMContentLoaded', () => {
    bulkActionsInstance = new BulkActions();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.BulkActions = BulkActions;
window.getBulkActionsInstance = () => bulkActionsInstance;
