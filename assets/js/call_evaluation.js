/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ü–µ–Ω–∫–∏ –∑–≤–æ–Ω–∫–∞
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let callData = null;
let audioPlayer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializePage();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function initializePage() {
    // –ü–æ–ª—É—á–∞–µ–º callid –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const callid = urlParams.get('callid');

    if (!callid) {
        showError('–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–≤–æ–Ω–∫–∞');
        return;
    }

    await loadCallDetails(callid);
    setupAudioPlayer();
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ
 */
async function loadCallDetails(callid) {
    try {
        const response = await fetch(`api/call_details.php?callid=${encodeURIComponent(callid)}`);
        const result = await response.json();

        console.log('API Response:', result); // DEBUG

        if (result.success) {
            callData = result.data;
            console.log('Call Data:', callData); // DEBUG
            console.log('Audio Status:', callData.audio_status); // DEBUG
            console.log('Audio Error:', callData.audio_error); // DEBUG
            renderCallInfo();
            renderTranscript();
            renderChecklist();
            renderAnalysis();
            setupAudioSource();
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ
 */
function renderCallInfo() {
    const container = document.getElementById('call-info');

    const html = `
        <div class="call-info-grid">
            <div class="info-item">
                <div class="info-label">ID –∑–≤–æ–Ω–∫–∞</div>
                <div class="info-value">${escapeHtml(callData.callid)}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</div>
                <div class="info-value">${formatDateTime(callData.started_at_utc)}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–ú–µ–Ω–µ–¥–∂–µ—Ä</div>
                <div class="info-value">${escapeHtml(callData.employee_name || '-')}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–û—Ç–¥–µ–ª</div>
                <div class="info-value">${escapeHtml(callData.department || '-')}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞</div>
                <div class="info-value">${escapeHtml(callData.client_phone || '-')}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</div>
                <div class="info-value">${formatDirection(callData.direction)}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                <div class="info-value">${formatDuration(callData.duration_sec)}</div>
            </div>
            <div class="info-item">
                <div class="info-label">–¢–∏–ø –∑–≤–æ–Ω–∫–∞</div>
                <div class="info-value">${formatCallType(callData.call_type)}</div>
            </div>
        </div>
    `;

    container.innerHTML = html;
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ
 */
function setupAudioSource() {
    const audioSource = document.getElementById('audio-source');
    const audioPlayer = document.getElementById('audio-player');

    if (callData.audio_path && callData.audio_status === 'DONE') {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ
        audioSource.src = `api/audio_stream.php?callid=${encodeURIComponent(callData.callid)}`;
        audioPlayer.load();
    } else {
        let errorMessage = '–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';

        if (callData.audio_status === 'ERROR') {
            errorMessage = `<div style="color: #721c24;">
                <strong>‚ùå –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ERROR)</strong><br>`;

            if (callData.audio_error && callData.audio_error !== 'null') {
                errorMessage += `<div style="margin-top: 8px;">üìã –ü—Ä–∏—á–∏–Ω–∞: <em>${escapeHtml(callData.audio_error)}</em></div>`;
            } else {
                errorMessage += `<div style="margin-top: 8px;">‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ</div>`;
            }

            errorMessage += `<div style="margin-top: 12px; font-size: 13px; color: #856404;">
                üí° <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞
            </div></div>`;
        } else if (callData.audio_status === 'QUEUED') {
            errorMessage = '‚è≥ –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É';
        } else if (callData.audio_status === 'DOWNLOADING') {
            errorMessage = '‚¨áÔ∏è –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...';
        } else if (callData.audio_status === 'TRANSCRIBING') {
            errorMessage = 'üéôÔ∏è –ò–¥—ë—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...';
        } else if (!callData.audio_status) {
            errorMessage = '‚ùì –ó–∞–¥–∞—á–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞';
        }

        document.getElementById('audio-player-container').innerHTML = `
            <div style="padding: 20px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 8px; color: #856404;">${errorMessage}</div>
        `;
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–∞
 */
function setupAudioPlayer() {
    audioPlayer = document.getElementById('audio-player');
    const playPauseBtn = document.getElementById('play-pause');
    const seekBar = document.getElementById('seek-bar');
    const volumeBar = document.getElementById('volume-bar');
    const currentTimeSpan = document.getElementById('current-time');
    const totalTimeSpan = document.getElementById('total-time');

    if (!audioPlayer) return;

    // Play/Pause
    playPauseBtn.addEventListener('click', function() {
        if (audioPlayer.paused) {
            audioPlayer.play();
            playPauseBtn.textContent = '‚è∏ –ü–∞—É–∑–∞';
        } else {
            audioPlayer.pause();
            playPauseBtn.textContent = '‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    audioPlayer.addEventListener('timeupdate', function() {
        const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
        seekBar.value = percent || 0;
        currentTimeSpan.textContent = formatTime(audioPlayer.currentTime);
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    audioPlayer.addEventListener('loadedmetadata', function() {
        totalTimeSpan.textContent = formatTime(audioPlayer.duration);
    });

    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞
    seekBar.addEventListener('input', function() {
        const time = (seekBar.value / 100) * audioPlayer.duration;
        audioPlayer.currentTime = time;
    });

    // –ì—Ä–æ–º–∫–æ—Å—Ç—å
    volumeBar.addEventListener('input', function() {
        audioPlayer.volume = volumeBar.value / 100;
    });

    // –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    audioPlayer.addEventListener('ended', function() {
        playPauseBtn.textContent = '‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
    });
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
function renderTranscript() {
    const container = document.getElementById('transcript');

    if (!callData.diarization || !callData.diarization.segments) {
        let message = '<div style="padding: 20px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 8px; color: #856404;">';
        message += '<strong>üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</strong><br>';

        if (callData.audio_status === 'ERROR') {
            message += '<div style="margin-top: 8px;">‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ</div>';
        } else if (callData.audio_status === 'QUEUED' || callData.audio_status === 'DOWNLOADING') {
            message += '<div style="margin-top: 8px;">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...</div>';
        } else if (callData.audio_status === 'TRANSCRIBING') {
            message += '<div style="margin-top: 8px;">üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</div>';
        } else {
            message += '<div style="margin-top: 8px;">‚ùì –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }

        message += '</div>';
        container.innerHTML = message;
        return;
    }

    const segments = callData.diarization.segments;

    const html = segments.map(segment => {
        const speakerClass = segment.speaker_role === '–ú–µ–Ω–µ–¥–∂–µ—Ä' ? 'speaker-manager' : 'speaker-client';
        return `
            <div class="transcript-segment ${speakerClass}">
                <div class="segment-header">
                    <span class="speaker-label">${escapeHtml(segment.speaker_role || segment.speaker)}</span>
                    <span class="segment-time">${formatTime(segment.start)} - ${formatTime(segment.end)}</span>
                </div>
                <div class="segment-text">${escapeHtml(segment.text)}</div>
            </div>
        `;
    }).join('');

    container.innerHTML = html || '<div class="error">–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏</div>';
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞
 */
function renderChecklist() {
    const container = document.getElementById('checklist-container');

    if (!callData.checklist || callData.checklist.length === 0) {
        container.innerHTML = '<div class="info">–ß–µ–∫–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞</div>';
        document.getElementById('compliance-score').style.display = 'none';
        return;
    }

    const html = callData.checklist.map(item => `
        <div class="checklist-item">
            <input type="checkbox" class="checklist-checkbox" ${item.checked ? 'checked' : ''} disabled>
            <div class="checklist-content">
                <div class="checklist-label">${escapeHtml(item.label)}</div>
                <div class="checklist-description">${escapeHtml(item.description)}</div>
            </div>
        </div>
    `).join('');

    container.innerHTML = html;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    if (callData.script_compliance_score !== null && callData.script_compliance_score !== undefined) {
        const percentage = Math.round(callData.script_compliance_score * 100);
        document.getElementById('compliance-score').innerHTML = `
            <h3>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞</h3>
            <div class="compliance-value">${percentage}%</div>
            <div class="compliance-label">–∏–∑ 100% –≤–æ–∑–º–æ–∂–Ω—ã—Ö</div>
        `;
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
 */
function renderAnalysis() {
    const container = document.getElementById('analysis-result');

    if (!callData.summary_text && !callData.call_result) {
        let message = '<div style="padding: 20px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 8px; color: #856404;">';
        message += '<strong>ü§ñ –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong><br>';

        if (!callData.transcript_text && !callData.diarization) {
            message += '<div style="margin-top: 8px;">‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</div>';

            if (callData.audio_status === 'ERROR') {
                message += '<div style="margin-top: 8px;">üìã –ü—Ä–∏—á–∏–Ω–∞: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ</div>';
            }
        } else {
            message += '<div style="margin-top: 8px;">‚ùì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }

        message += '</div>';
        container.innerHTML = message;
        return;
    }

    let html = '';

    // –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
    if (callData.summary_text) {
        html += `
            <div class="analysis-section">
                <h3>üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</h3>
                <div class="analysis-text">${escapeHtml(callData.summary_text)}</div>
            </div>
        `;
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞
    if (callData.call_result) {
        // –õ–æ–≥–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ–π (calls_list.js)
        let badgeClass = 'badge-info'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π
        const resultLower = callData.call_result.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        if (resultLower.includes('–ø–æ–∫–∞–∑')) {
            badgeClass = 'badge-success'; // –ó–µ–ª–µ–Ω—ã–π
        } else if (resultLower.includes('–ø–µ—Ä–µ–∑–≤–æ–Ω')) {
            badgeClass = 'badge-warning'; // –ñ–µ–ª—Ç—ã–π
        } else if (resultLower.includes('–æ—Ç–∫–∞–∑')) {
            badgeClass = 'badge-danger'; // –ö—Ä–∞—Å–Ω—ã–π
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–æ –µ—Å—Ç—å —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        else if (callData.is_successful !== null && callData.is_successful !== undefined) {
            badgeClass = callData.is_successful ? 'badge-success' : 'badge-danger';
        }

        html += `
            <div class="analysis-section">
                <h3>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞</h3>
                <span class="analysis-result-badge ${badgeClass}">${escapeHtml(callData.call_result)}</span>
            </div>
        `;
    } else if (callData.is_successful !== null && callData.is_successful !== undefined) {
        // –ï—Å–ª–∏ –Ω–µ—Ç call_result, –Ω–æ –µ—Å—Ç—å —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        const badgeClass = callData.is_successful ? 'badge-success' : 'badge-danger';
        const text = callData.is_successful ? '–£—Å–ø–µ—à–Ω—ã–π' : '–ù–µ—É—Å–ø–µ—à–Ω—ã–π';
        html += `
            <div class="analysis-section">
                <h3>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞</h3>
                <span class="analysis-result-badge ${badgeClass}">${text}</span>
            </div>
        `;
    }

    // –ü—Ä–∏—á–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏/–Ω–µ—É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if (callData.success_reason) {
        html += `
            <div class="analysis-section">
                <h3>${callData.is_successful ? '‚úÖ' : '‚ùå'} –ü—Ä–∏—á–∏–Ω–∞ ${callData.is_successful ? '—É—Å–ø–µ—à–Ω–æ—Å—Ç–∏' : '–Ω–µ—É—Å–ø–µ—à–Ω–æ—Å—Ç–∏'}</h3>
                <div class="analysis-text">${escapeHtml(callData.success_reason)}</div>
            </div>
        `;
    }

    // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
    if (callData.script_check_details) {
        html += `
            <div class="analysis-section">
                <h3>üìù –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞</h3>
                <div class="analysis-text">${escapeHtml(callData.script_check_details)}</div>
            </div>
        `;
    }

    // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ LLM
    if (callData.llm_analysis) {
        html += `
            <div class="analysis-section">
                <h3>ü§ñ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (LLM)</h3>
                <div class="analysis-text" style="max-height: 400px; overflow-y: auto;">
                    <pre style="white-space: pre-wrap; font-family: inherit;">${escapeHtml(callData.llm_analysis)}</pre>
                </div>
            </div>
        `;
    }

    container.innerHTML = html;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
 */
function showError(message) {
    document.getElementById('call-info').innerHTML = `<div class="error">${escapeHtml(message)}</div>`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã -> mm:ss)
 */
function formatTime(seconds) {
    if (!seconds || isNaN(seconds)) return '00:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatDateTime(dateStr) {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function formatDuration(seconds) {
    if (!seconds) return '-';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}–º ${secs}—Å`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
 */
function formatDirection(direction) {
    const directions = {
        'INBOUND': '<span class="badge badge-info">–í—Ö–æ–¥—è—â–∏–π</span>',
        'OUTBOUND': '<span class="badge badge-success">–ò—Å—Ö–æ–¥—è—â–∏–π</span>',
        'MISSED': '<span class="badge badge-danger">–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π</span>'
    };
    return directions[direction] || `<span class="badge">${escapeHtml(direction || '-')}</span>`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
 */
function formatCallType(type) {
    if (!type) return '-';
    const types = {
        'first_call': '–ü–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫',
        'other': '–î—Ä—É–≥–æ–µ'
    };
    return types[type] || escapeHtml(type);
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    if (!text) return '';
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}
