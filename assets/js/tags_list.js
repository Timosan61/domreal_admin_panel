/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentPage = 1;
let currentFilters = {};
let currentSort = { by: 'tagged_at', order: 'DESC' };
let multiselectInstances = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializePage();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function initializePage() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º multiselect –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    multiselectInstances = initMultiselects();

    await loadFilterOptions();
    await loadStateFromURL();
    setupEventListeners();
    await loadTags();
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
async function loadFilterOptions() {
    try {
        const response = await fetchWithRetry('api/filters.php', {
            headers: {
                'Accept': 'application/json'
            }
        });
        const result = await response.json();

        if (result.success) {
            const { departments, managers } = result.data;

            // –ó–∞–ø–æ–ª–Ω—è–µ–º multiselect –æ—Ç–¥–µ–ª–æ–≤
            const departmentMS = multiselectInstances.get('department-multiselect');
            if (departmentMS) {
                const options = departments.map(dept => ({
                    name: 'departments[]',
                    value: dept,
                    label: dept
                }));
                departmentMS.setOptions(options);
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º multiselect –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const managerMS = multiselectInstances.get('manager-multiselect');
            if (managerMS) {
                const options = managers.map(manager => ({
                    name: 'managers[]',
                    value: manager,
                    label: manager
                }));
                managerMS.setOptions(options);
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º multiselect —Ç–µ–≥–æ–≤
            const tagsMS = multiselectInstances.get('tags-multiselect');
            if (tagsMS) {
                const tagOptions = [
                    { name: 'tag_types[]', value: 'good', label: '‚úÖ –•–æ—Ä–æ—à–æ' },
                    { name: 'tag_types[]', value: 'bad', label: '‚ùå –ü–ª–æ—Ö–æ' },
                    { name: 'tag_types[]', value: 'question', label: '‚ùì –í–æ–ø—Ä–æ—Å' }
                ];
                tagsMS.setOptions(tagOptions);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
    }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ URL
 */
async function loadStateFromURL() {
    const params = new URLSearchParams(window.location.search);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    currentFilters = {};

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º multiselect –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (multiselectInstances) {
        // –¢–µ–≥–∏
        const tagTypes = params.get('tag_types');
        if (tagTypes) {
            currentFilters['tag_types'] = tagTypes;
            const tagsMS = multiselectInstances.get('tags-multiselect');
            if (tagsMS) {
                const tagsArray = tagTypes.split(',');
                tagsMS.setValues(tagsArray);
            }
        }

        // –û—Ç–¥–µ–ª—ã
        const departments = params.get('departments');
        if (departments) {
            currentFilters['departments'] = departments;
            const departmentMS = multiselectInstances.get('department-multiselect');
            if (departmentMS) {
                const deptArray = departments.split(',');
                departmentMS.setValues(deptArray);
            }
        }

        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        const managers = params.get('managers');
        if (managers) {
            currentFilters['managers'] = managers;
            const managerMS = multiselectInstances.get('manager-multiselect');
            if (managerMS) {
                const managersArray = managers.split(',');
                managerMS.setValues(managersArray);
            }
        }
    }

    // –î–∞—Ç—ã
    const dateFrom = params.get('date_from');
    if (dateFrom) {
        currentFilters['date_from'] = dateFrom;
        document.getElementById('date_from').value = dateFrom;
    }

    const dateTo = params.get('date_to');
    if (dateTo) {
        currentFilters['date_to'] = dateTo;
        document.getElementById('date_to').value = dateTo;
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const page = params.get('page');
    if (page) {
        currentPage = parseInt(page);
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ URL
 */
function saveStateToURL() {
    const params = new URLSearchParams();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    for (let [key, value] of Object.entries(currentFilters)) {
        if (value) {
            params.set(key, value);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (currentPage !== 1) {
        params.set('page', currentPage);
    }

    const newURL = params.toString() ? `?${params.toString()}` : window.location.pathname;
    window.history.replaceState({}, '', newURL);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –§–∏–ª—å—Ç—Ä—ã
    const filtersForm = document.getElementById('filters-form');
    filtersForm.addEventListener('submit', function(e) {
        e.preventDefault();
        currentPage = 1;
        currentFilters = getFiltersFromForm();
        saveStateToURL();
        loadTags();
    });

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('reset-filters').addEventListener('click', function() {
        filtersForm.reset();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ multiselect
        if (multiselectInstances) {
            multiselectInstances.forEach(instance => {
                instance.clear();
            });
        }

        currentPage = 1;
        currentFilters = {};
        saveStateToURL();
        loadTags();
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    document.querySelectorAll('th[data-sort]').forEach(th => {
        th.addEventListener('click', function() {
            const sortBy = this.getAttribute('data-sort');

            if (currentSort.by === sortBy) {
                currentSort.order = currentSort.order === 'DESC' ? 'ASC' : 'DESC';
            } else {
                currentSort.by = sortBy;
                currentSort.order = 'DESC';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            document.querySelectorAll('th[data-sort]').forEach(header => {
                const icon = header.querySelector('.sort-icon');
                if (icon) {
                    icon.textContent = '‚Üï';
                }
            });

            const icon = this.querySelector('.sort-icon');
            if (icon) {
                icon.textContent = currentSort.order === 'DESC' ? '‚Üì' : '‚Üë';
            }

            saveStateToURL();
            loadTags();
        });
    });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
 */
function getFiltersFromForm() {
    const filters = {};

    // –î–∞—Ç—ã
    const dateFrom = document.getElementById('date_from').value;
    if (dateFrom) filters['date_from'] = dateFrom;

    const dateTo = document.getElementById('date_to').value;
    if (dateTo) filters['date_to'] = dateTo;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ multiselect –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (multiselectInstances) {
        // –¢–µ–≥–∏
        const tagsMS = multiselectInstances.get('tags-multiselect');
        if (tagsMS) {
            const tags = tagsMS.getValues();
            if (tags.length > 0) {
                filters['tag_types'] = tags.join(',');
            }
        }

        // –û—Ç–¥–µ–ª—ã
        const departmentMS = multiselectInstances.get('department-multiselect');
        if (departmentMS) {
            const departments = departmentMS.getValues();
            if (departments.length > 0) {
                filters['departments'] = departments.join(',');
            }
        }

        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        const managerMS = multiselectInstances.get('manager-multiselect');
        if (managerMS) {
            const managers = managerMS.getValues();
            if (managers.length > 0) {
                filters['managers'] = managers.join(',');
            }
        }
    }

    return filters;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
 */
async function loadTags() {
    const tbody = document.getElementById('calls-tbody');
    tbody.innerHTML = '<tr><td colspan="9" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</td></tr>';

    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const params = new URLSearchParams({
            ...currentFilters,
            page: currentPage,
            per_page: 20
        });

        console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', currentFilters);
        console.log('üì° API URL:', `api/tags.php?${params}`);

        const response = await fetchWithRetry(`api/tags.php?${params}`, {
            headers: {
                'Accept': 'application/json'
            }
        });
        console.log('üì• Response status:', response.status);
        console.log('üì• Response headers:', response.headers);

        const responseText = await response.text();
        console.log('üì• Response text (raw):', responseText);

        let result;
        try {
            result = JSON.parse(responseText);
            console.log('üì• Response JSON:', result);
        } catch (e) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:', e);
            console.error('Raw response:', responseText);
            tbody.innerHTML = '<tr><td colspan="9" class="error">–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API</td></tr>';
            return;
        }

        if (result.success) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data.length, '—Ç–µ–≥–æ–≤');
            renderTags(result.data);
            renderPagination(result.pagination);
            updateStats(result.pagination);
        } else {
            console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result.error);
            tbody.innerHTML = `<tr><td colspan="9" class="error">–û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</td></tr>`;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
        tbody.innerHTML = '<tr><td colspan="9" class="error">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + error.message + '</td></tr>';
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
 */
function renderTags(tags) {
    const tbody = document.getElementById('calls-tbody');

    if (tags.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" class="text-center">–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</td></tr>';
        return;
    }

    tbody.innerHTML = tags.map(tag => `
        <tr>
            <td class="text-center">
                <input type="checkbox" class="call-checkbox" data-callid="${tag.callid}">
            </td>
            <td class="tag-cell" title="${formatTagTitle(tag.tag_type, tag.note)}">
                ${formatTag(tag.tag_type)}
            </td>
            <td class="note-cell" title="${escapeHtml(tag.note || '')}">${formatNote(tag.note)}</td>
            <td class="employee-cell">${escapeHtml(tag.employee_name || '-')}</td>
            <td>${formatCallResult(tag.call_result)}</td>
            <td>${formatDateTime(tag.started_at_utc)}</td>
            <td>${escapeHtml(tag.client_phone || '-')}</td>
            <td class="actions-cell">
                <a href="call_evaluation.php?callid=${encodeURIComponent(tag.callid)}"
                   class="btn btn-primary btn-sm">
                    –û—Ç–∫—Ä—ã—Ç—å
                </a>
            </td>
            <td class="department-cell">${escapeHtml(tag.department || '-')}</td>
        </tr>
    `).join('');
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function renderPagination(pagination) {
    const container = document.getElementById('pagination');
    const { page, total_pages } = pagination;

    if (total_pages <= 1) {
        container.innerHTML = '';
        return;
    }

    let html = `
        <button ${page === 1 ? 'disabled' : ''} onclick="goToPage(1)">–ü–µ—Ä–≤–∞—è</button>
        <button ${page === 1 ? 'disabled' : ''} onclick="goToPage(${page - 1})">‚Üê –ù–∞–∑–∞–¥</button>
        <span class="page-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${total_pages}</span>
        <button ${page === total_pages ? 'disabled' : ''} onclick="goToPage(${page + 1})">–í–ø–µ—Ä—ë–¥ ‚Üí</button>
        <button ${page === total_pages ? 'disabled' : ''} onclick="goToPage(${total_pages})">–ü–æ—Å–ª–µ–¥–Ω—è—è</button>
    `;

    container.innerHTML = html;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStats(pagination) {
    document.getElementById('stat-total').textContent = pagination.total;
    document.getElementById('stat-page').textContent = Math.min(pagination.per_page, pagination.total - (pagination.page - 1) * pagination.per_page);
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */
function goToPage(page) {
    currentPage = page;
    saveStateToURL();
    loadTags();
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
 */
function formatTag(tagType) {
    const tagEmojis = {
        'good': '‚úÖ',
        'bad': '‚ùå',
        'question': '‚ùì'
    };
    return tagEmojis[tagType] || '‚Äî';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ title –¥–ª—è —Ç–µ–≥–∞
 */
function formatTagTitle(tagType, tagNote) {
    if (!tagType) return '–ë–µ–∑ —Ç–µ–≥–∞';

    const tagNames = {
        'good': '–•–æ—Ä–æ—à–æ',
        'bad': '–ü–ª–æ—Ö–æ',
        'question': '–í–æ–ø—Ä–æ—Å'
    };

    let title = `–¢–µ–≥: ${tagNames[tagType]}`;
    if (tagNote) {
        title += `\n–ó–∞–º–µ—Ç–∫–∞: ${tagNote}`;
    }
    return title;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
 */
function formatNote(note) {
    if (!note || note.trim() === '') return '‚Äî';

    const maxLength = 50;
    const text = note.trim();

    if (text.length > maxLength) {
        return escapeHtml(text.substring(0, maxLength)) + '...';
    }

    return escapeHtml(text);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatDateTime(dateStr) {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞
 */
function formatCallResult(result) {
    if (!result) return '-';

    let cleanResult = result.replace(/^–†–µ–∑—É–ª—å—Ç–∞—Ç:\s*/i, '').trim();
    cleanResult = cleanResult.replace(/\s+–∑–≤–æ–Ω–æ–∫$/i, '');
    cleanResult = cleanResult.replace(/\s+–≤—ã–ø–æ–ª–Ω–µ–Ω–∞$/i, '');

    let badgeClass = 'badge-info';
    let icon = '';
    const resultLower = cleanResult.toLowerCase();

    if (resultLower.includes('–∫–≤–∞–ª–∏—Ñ–∏–∫')) {
        badgeClass = 'badge-success';
        icon = 'üìã ';
    } else if (resultLower.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || resultLower.includes('–æ—Ç–ø—Ä–∞–≤')) {
        badgeClass = 'badge-success';
        icon = 'üì§ ';
    } else if (resultLower.includes('–ø–æ–∫–∞–∑')) {
        badgeClass = 'badge-success';
        icon = 'üè† ';
    } else if (resultLower.includes('–ø–µ—Ä–µ–∑–≤–æ–Ω')) {
        badgeClass = 'badge-info';
        icon = 'üìû ';
    } else if (resultLower.includes('–æ—Ç–∫–∞–∑')) {
        badgeClass = 'badge-danger';
        icon = '‚ùå ';
    } else if (resultLower.includes('–Ω–µ –¥–æ–∑–≤–æ–Ω')) {
        badgeClass = 'badge-secondary';
        icon = 'üìµ ';
    } else if (resultLower.includes('–ª–∏—á–Ω') || resultLower.includes('–Ω–µ—Ä–∞–±–æ—á')) {
        badgeClass = 'badge-secondary';
        icon = 'üë§ ';
    }

    return `<span class="badge ${badgeClass}">${icon}${escapeHtml(cleanResult)}</span>`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    if (!text) return '';
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}
